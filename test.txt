const.h
#pragma once

#define REG_SECTION          _T("KISSHProject")

#define RN_SERVER_IP         _T("ServerIP")
#define RN_SERVER_PORT       _T("ServerPort")


#define TCP_ADDR               ((192 << 24) | (168 << 16) | (10 << 8) | (27))
#define TCP_PORT               5153




DeviceAddressWnd.h
#pragma once


// DeviceAddressWnd 对话框

class DeviceAddressWnd : public CDialogEx
{
	DECLARE_DYNAMIC(DeviceAddressWnd)

public:
	DeviceAddressWnd(CWnd* pParent = nullptr);   // 标准构造函数
	virtual ~DeviceAddressWnd();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_DIALOG_DEVICE_ADDR };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

	DECLARE_MESSAGE_MAP()
public:
	virtual BOOL OnInitDialog();
	afx_msg void OnBnClickedOk();

	CIPAddressCtrl m_ip;
	CEdit m_port;
};


KISSHProjectDlg.h

// KISSHProjectDlg.h: 头文件
//

#pragma once


// CKISSHProjectDlg 对话框
class CKISSHProjectDlg : public CDialogEx
{
// 构造
public:
	CKISSHProjectDlg(CWnd* pParent = nullptr);	// 标准构造函数

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_KISSHPROJECT_DIALOG };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV 支持


// 实现
protected:
	HICON m_hIcon;

	// 生成的消息映射函数
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	afx_msg void OnBnClickedButtonSend();
	afx_msg void OnBnClickedButtonConnect();
	afx_msg void OnClose();
	afx_msg LRESULT OnConnected(WPARAM wParam, LPARAM lParam);
	DECLARE_MESSAGE_MAP()

public:
	HANDLE m_hEvtConnect;
	CWinThread* m_pThrdConnect;

	WSAEVENT m_hEvtSSig;
	HANDLE m_hEvtSend;
	CWinThread* m_pThrdSend;

	WSAEVENT m_hEvtRSig;
	HANDLE m_hEvtRecv;
	CWinThread* m_pThrdRecv;

	static UINT DoConnect(LPVOID lpParam);
	static UINT TcpSend(LPVOID lpParam);
	static UINT TcpRecv(LPVOID lpParam);
	void CleanSocket();

	SOCKET  m_sock;
	CButton m_btnConnect;
};


Resource.h
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ 生成的包含文件。
// 供 KISSHProject.rc 使用
//
#define IDM_ABOUTBOX                    0x0010
#define IDD_ABOUTBOX                    100
#define IDS_ABOUTBOX                    101
#define IDD_KISSHPROJECT_DIALOG         102
#define IDP_SOCKETS_INIT_FAILED         103
#define IDR_MAINFRAME                   128
#define IDD_DIALOG_DEVICE_ADDR          130
#define IDS_CONNECT_FAILED              131
#define IDS_CONNECT_SUCCESS             132
#define IDC_BUTTON_SEND                 1000
#define IDC_BUTTON_CONNECT              1001
#define IDC_IPADDRESS_DEVICE            1002
#define IDC_EDIT_DEVICE_PORT            1003

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        133
#define _APS_NEXT_COMMAND_VALUE         32771
#define _APS_NEXT_CONTROL_VALUE         1004
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif


Settings.h
#pragma once

class Settings
{
public:
	Settings();
	~Settings();

	static bool Save();
	static bool Load();

	static bool  m_bInit;
	static DWORD m_dwIP;
	static int   m_nPort;
};

UserMsg.h
#pragma once

//WPARAM:
// 0 --- success
// 1 --- failed
#define WM_CONNECT        WM_USER+1


DeviceAddressWnd.cpp
// DeviceAddressWnd.cpp: 实现文件
//

#include "pch.h"
#include "KISSHProject.h"
#include "DeviceAddressWnd.h"
#include "afxdialogex.h"
#include "const.h"
#include "Settings.h"


// DeviceAddressWnd 对话框

IMPLEMENT_DYNAMIC(DeviceAddressWnd, CDialogEx)

DeviceAddressWnd::DeviceAddressWnd(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_DIALOG_DEVICE_ADDR, pParent)
{
}


DeviceAddressWnd::~DeviceAddressWnd()
{
}


void DeviceAddressWnd::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_IPADDRESS_DEVICE, m_ip);
	DDX_Control(pDX, IDC_EDIT_DEVICE_PORT, m_port);
}


BEGIN_MESSAGE_MAP(DeviceAddressWnd, CDialogEx)
	ON_BN_CLICKED(IDOK, &DeviceAddressWnd::OnBnClickedOk)
END_MESSAGE_MAP()


// DeviceAddressWnd 消息处理程序

BOOL DeviceAddressWnd::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	Settings ss;
	m_ip.SetAddress(ss.m_dwIP);
	CString s;
	s.Format(_T("%d"), ss.m_nPort);
	m_port.SetWindowText(s);

	return TRUE;
}


void DeviceAddressWnd::OnBnClickedOk()
{
	DWORD dwIP;
	m_ip.GetAddress(dwIP);
	CString s;
	m_port.GetWindowText(s);
	int nPort = _ttoi(s);

	Settings ss;
	ss.m_dwIP = dwIP;
	ss.m_nPort = nPort;

	ss.Save();

	CDialogEx::OnOK();
}


KISSHProject.cpp

// KISSHProject.cpp: 定义应用程序的类行为。
//

#include "pch.h"
#include "framework.h"
#include "KISSHProject.h"
#include "KISSHProjectDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CKISSHProjectApp

BEGIN_MESSAGE_MAP(CKISSHProjectApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CKISSHProjectApp 构造

CKISSHProjectApp::CKISSHProjectApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的 CKISSHProjectApp 对象

CKISSHProjectApp theApp;


// CKISSHProjectApp 初始化

BOOL CKISSHProjectApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	if (!AfxSocketInit())
	{
		AfxMessageBox(IDP_SOCKETS_INIT_FAILED);
		return FALSE;
	}

	WSADATA wsa;
	if (WSAStartup(MAKEWORD(2,2), &wsa) != 0)
	{
		return FALSE;
	}

	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("KISSH"));

	CKISSHProjectDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}
	else if (nResponse == -1)
	{
		TRACE(traceAppMsg, 0, "警告: 对话框创建失败，应用程序将意外终止。\n");
		TRACE(traceAppMsg, 0, "警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n");
	}

	// 删除上面创建的 shell 管理器。
	if (pShellManager != nullptr)
	{
		delete pShellManager;
	}

#if !defined(_AFXDLL) && !defined(_AFX_NO_MFC_CONTROLS_IN_DIALOGS)
	ControlBarCleanUp();
#endif

	WSACleanup();

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}


KISSHProjectDlg.cpp

// KISSHProjectDlg.cpp: 实现文件
//

#include "pch.h"
#include "framework.h"
#include "KISSHProject.h"
#include "KISSHProjectDlg.h"
#include "afxdialogex.h"
#include "DeviceAddressWnd.h"
#include "Settings.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CKISSHProjectDlg 对话框



CKISSHProjectDlg::CKISSHProjectDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_KISSHPROJECT_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);

	m_hEvtConnect = NULL;
	m_pThrdConnect= nullptr;

	m_hEvtSend = NULL;
	m_pThrdSend = nullptr;

	m_hEvtRecv = NULL;
	m_pThrdRecv = nullptr;

	m_sock = INVALID_SOCKET;
}


void CKISSHProjectDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_BUTTON_CONNECT, m_btnConnect);
}


BEGIN_MESSAGE_MAP(CKISSHProjectDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON_SEND, &CKISSHProjectDlg::OnBnClickedButtonSend)
	ON_BN_CLICKED(IDC_BUTTON_CONNECT, &CKISSHProjectDlg::OnBnClickedButtonConnect)
	ON_WM_CLOSE()
	ON_MESSAGE(&CKISSHProjectDlg::OnConnected)
END_MESSAGE_MAP()


// CKISSHProjectDlg 消息处理程序
BOOL CKISSHProjectDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CKISSHProjectDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CKISSHProjectDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CKISSHProjectDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CKISSHProjectDlg::OnBnClickedButtonSend()
{
	// TODO: 在此添加控件通知处理程序代码
}


void CKISSHProjectDlg::OnBnClickedButtonConnect()
{
	if (m_sock != INVALID_SOCKET)
	{
		return;
	}

	DeviceAddressWnd dlg(this);
	if (dlg.DoModal() == IDOK)
	{
		m_hEvtConnect = CreateEvent(NULL, TRUE, FALSE, NULL);
		m_pThrdConnect= AfxBeginThread(DoConnect, this, THREAD_PRIORITY_NORMAL, 0, CREATE_SUSPENDED);
		if (nullptr == m_pThrdConnect)
		{
			return;
		}
		m_pThrdConnect->m_bAutoDelete = FALSE;
		m_pThrdConnect->ResumeThread();

		//AfxMessageBox(IDS_CONNECT_FAILED);
		//AfxMessageBox(IDS_CONNECT_SUCCESS);
	}
}


UINT CKISSHProjectDlg::DoConnect(LPVOID lpParam)
{
	CKISSHProjectDlg* pWnd = (CKISSHProjectDlg*)lpParam;
	if (nullptr == pWnd)
	{
		return 0;
	}

	SOCKET& sock = pWnd->m_sock;
	sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (INVALID_SOCKET == sock)
	{
		return false;
	}

	Settings ss;

	SOCKADDR_IN sockAddr;
	memset(&sockAddr, 0, sizeof(sockAddr));
	sockAddr.sin_family = AF_INET;
	sockAddr.sin_addr.s_addr = htonl(ss.m_dwIP);
	sockAddr.sin_port = htons(ss.m_nPort);

	// 设置为非阻塞模式
	//u_long mode = 1;
	//ioctlsocket(m_sock, FIONBIO, &mode);
	WSAEVENT evt = WSACreateEvent();
	if (WSAEventSelect(sock, evt, FD_CONNECT | FD_CLOSE) != SOCKET_ERROR)
	{
		int ret = connect(sock, (SOCKADDR*)&sockAddr, sizeof(sockAddr));
		if (ret != 0)
		{
			if (WSAGetLastError() == WSAEWOULDBLOCK)
			{
				WSAEVENT EvtArray[1] = { evt }:
				DWORD retval = WSAWaitForMultipleEvents(1, EvtArray, TRUE, 3000, FALSE);

			}
		}
		else
		{

		}
	}


	WSACloseEvent(evt);


	//if (SOCKET_ERROR == ret)
	//{
	//	closesocket(m_sock);
	//	m_sock = INVALID_SOCKET;
	//	return false;
	//}

	//// send thread
	//m_hEvtSend = CreateEvent(NULL, TRUE, FALSE, NULL);
	//m_pThrdSend = AfxBeginThread(TcpSend, this, THREAD_PRIORITY_NORMAL, 0, CREATE_SUSPENDED);
	//if (nullptr == m_pThrdSend)
	//{
	//	return;
	//}
	//m_pThrdSend->m_bAutoDelete = FALSE;
	//m_pThrdSend->ResumeThread();

	//// receive thread
	//m_hEvtRecv = CreateEvent(NULL, TRUE, FALSE, NULL);
	//m_pThrdRecv = AfxBeginThread(TcpRecv, this, THREAD_PRIORITY_NORMAL, 0, CREATE_SUSPENDED);
	//if (nullptr == m_pThrdRecv)
	//{
	//	return;
	//}
	//m_pThrdRecv->m_bAutoDelete = FALSE;
	//m_pThrdRecv->ResumeThread();
	return true;
}


UINT CKISSHProjectDlg::TcpSend(LPVOID lpParam)
{
	return 0;
}


UINT CKISSHProjectDlg::TcpRecv(LPVOID lpParam)
{
	return 0;
}


void CKISSHProjectDlg::CleanSocket()
{
	if (INVALID_SOCKET == m_sock)
	{
		return;
	}

	closesocket(m_sock);
	m_sock = INVALID_SOCKET;

	if (m_pThrdRecv != nullptr)
	{
		SetEvent(m_hEvtRecv);
		if (WaitForSingleObject(m_pThrdRecv->m_hThread, INFINITE) == WAIT_OBJECT_0)
		{
			delete m_pThrdRecv;
			m_pThrdRecv = nullptr;
		}
	}

	if (m_pThrdSend != nullptr)
	{
		SetEvent(m_hEvtSend);
		if (WaitForSingleObject(m_pThrdSend->m_hThread, INFINITE) == WAIT_OBJECT_0)
		{
			delete m_pThrdSend;
			m_pThrdSend = nullptr;
		}
	}
}


void CKISSHProjectDlg::OnClose()
{
	CleanSocket();
	CDialogEx::OnClose();
}


LRESULT CKISSHProjectDlg::OnConnected(WPARAM wParam, LPARAM lParam)
{
	return 0;
}


Settings.cpp

#include "pch.h"
#include "Settings.h"
#include "const.h"


bool  Settings::m_bInit = false;
DWORD Settings::m_dwIP  = TCP_ADDR;
int   Settings::m_nPort = TCP_PORT;


Settings::Settings()
{
	if (!m_bInit && Load())
	{
		m_bInit = true;
	}
}


Settings::~Settings()
{
}


bool Settings::Save()
{
	CWinApp* p = AfxGetApp();
	if (nullptr == p)
	{
		return false;
	}

	p->WriteProfileInt(REG_SECTION, RN_SERVER_IP, m_dwIP);
	p->WriteProfileInt(REG_SECTION, RN_SERVER_PORT, m_nPort);

	return true;
}


bool Settings::Load()
{
	CWinApp* p = AfxGetApp();
	if (nullptr == p)
	{
		return false;
	}

	m_dwIP = p->GetProfileInt(REG_SECTION, RN_SERVER_IP, TCP_ADDR);
	m_nPort= p->GetProfileInt(REG_SECTION, RN_SERVER_PORT, TCP_PORT);

	return true;
}






// Microsoft Visual C++ generated resource script.
//
#include "resource.h"

#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#ifndef APSTUDIO_INVOKED
#include "targetver.h"
#endif
#include "afxres.h"
#include "verrsrc.h"

/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
// 中文(简体，中国) resources

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_CHS)
LANGUAGE LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED

#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE 
BEGIN
    "resource.h\0"
END

2 TEXTINCLUDE 
BEGIN
    "#ifndef APSTUDIO_INVOKED\r\n"
    "#include ""targetver.h""\r\n"
    "#endif\r\n"
    "#include ""afxres.h""\r\n"
    "#include ""verrsrc.h""\r\n"
    "\0"
END

3 TEXTINCLUDE 
BEGIN
    "#define _AFX_NO_SPLITTER_RESOURCES\r\n"
    "#define _AFX_NO_OLE_RESOURCES\r\n"
    "#define _AFX_NO_TRACKER_RESOURCES\r\n"
    "#define _AFX_NO_PROPERTY_RESOURCES\r\n"
    "\r\n"
    "#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_CHS)\r\n"
    "LANGUAGE 4, 2\r\n"
    "#include ""res\\KISSHProject.rc2""  // 非 Microsoft Visual C++ 编辑的资源\r\n"
    "#include ""l.CHS\\afxres.rc""      // 标准组件\r\n"
    "#if !defined(_AFXDLL)\r\n"
    "#include ""l.CHS\\afxribbon.rc""   // MFC 功能区和控制条资源\r\n"
    "#endif\r\n"
    "#endif\r\n"
    "\0"
END

#endif    // APSTUDIO_INVOKED


/////////////////////////////////////////////////////////////////////////////
//
// Icon
//

// Icon with lowest ID value placed first to ensure application icon
// remains consistent on all systems.
IDR_MAINFRAME           ICON                    "res\\KISSHProject.ico"


/////////////////////////////////////////////////////////////////////////////
//
// Dialog
//

IDD_ABOUTBOX DIALOGEX 0, 0, 170, 62
STYLE DS_SETFONT | DS_MODALFRAME | DS_FIXEDSYS | WS_POPUP | WS_CAPTION | WS_SYSMENU
CAPTION "关于 KISSHProject"
FONT 9, "MS Shell Dlg", 0, 0, 0x1
BEGIN
    ICON            IDR_MAINFRAME,IDC_STATIC,14,14,21,20
    LTEXT           "KISSHProject，版本 1.0",IDC_STATIC,42,14,114,8,SS_NOPREFIX
    LTEXT           "版权所有 (C) 2020",IDC_STATIC,42,26,114,8
    DEFPUSHBUTTON   "确定",IDOK,113,41,50,14,WS_GROUP
END

IDD_KISSHPROJECT_DIALOG DIALOGEX 0, 0, 412, 296
STYLE DS_SETFONT | DS_FIXEDSYS | WS_POPUP | WS_VISIBLE | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME
EXSTYLE WS_EX_APPWINDOW
FONT 9, "MS Shell Dlg", 0, 0, 0x1
BEGIN
    DEFPUSHBUTTON   "确定",IDOK,301,278,50,14
    PUSHBUTTON      "取消",IDCANCEL,358,278,50,14
    PUSHBUTTON      "执行",IDC_BUTTON_SEND,358,4,50,14
    PUSHBUTTON      "连接",IDC_BUTTON_CONNECT,4,278,50,14
END

IDD_DIALOG_DEVICE_ADDR DIALOGEX 0, 0, 219, 91
STYLE DS_SETFONT | DS_MODALFRAME | DS_FIXEDSYS | WS_POPUP | WS_CAPTION | WS_SYSMENU
CAPTION "连接"
FONT 8, "MS Shell Dlg", 400, 0, 0x1
BEGIN
    DEFPUSHBUTTON   "确定",IDOK,49,73,50,14
    PUSHBUTTON      "取消",IDCANCEL,120,73,50,14
    LTEXT           "地址",IDC_STATIC,31,22,17,8
    LTEXT           "端口",IDC_STATIC,31,44,17,8
    CONTROL         "",IDC_IPADDRESS_DEVICE,"SysIPAddress32",WS_TABSTOP,57,19,100,15
    EDITTEXT        IDC_EDIT_DEVICE_PORT,57,42,40,14,ES_AUTOHSCROLL | ES_NUMBER
END


/////////////////////////////////////////////////////////////////////////////
//
// Version
//

VS_VERSION_INFO VERSIONINFO
 FILEVERSION 1,0,0,1
 PRODUCTVERSION 1,0,0,1
 FILEFLAGSMASK 0x3fL
#ifdef _DEBUG
 FILEFLAGS 0x1L
#else
 FILEFLAGS 0x0L
#endif
 FILEOS 0x40004L
 FILETYPE 0x1L
 FILESUBTYPE 0x0L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "080404B0"
        BEGIN
            VALUE "CompanyName", "TODO: <公司名>"
            VALUE "FileDescription", "KISSHProject"
            VALUE "FileVersion", "1.0.0.1"
            VALUE "InternalName", "KISSHProject.exe"
            VALUE "LegalCopyright", "TODO:  (C) <公司名>。  保留所有权利。"
            VALUE "OriginalFilename", "KISSHProject.exe"
            VALUE "ProductName", "TODO: <产品名>"
            VALUE "ProductVersion", "1.0.0.1"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x804, 1200
    END
END


/////////////////////////////////////////////////////////////////////////////
//
// DESIGNINFO
//

#ifdef APSTUDIO_INVOKED
GUIDELINES DESIGNINFO
BEGIN
    IDD_ABOUTBOX, DIALOG
    BEGIN
        LEFTMARGIN, 7
        RIGHTMARGIN, 163
        TOPMARGIN, 7
        BOTTOMMARGIN, 55
    END

    IDD_KISSHPROJECT_DIALOG, DIALOG
    BEGIN
        LEFTMARGIN, 4
        RIGHTMARGIN, 408
        TOPMARGIN, 4
        BOTTOMMARGIN, 292
    END

    IDD_DIALOG_DEVICE_ADDR, DIALOG
    BEGIN
        LEFTMARGIN, 4
        RIGHTMARGIN, 215
        TOPMARGIN, 4
        BOTTOMMARGIN, 87
    END
END
#endif    // APSTUDIO_INVOKED


/////////////////////////////////////////////////////////////////////////////
//
// AFX_DIALOG_LAYOUT
//

IDD_KISSHPROJECT_DIALOG AFX_DIALOG_LAYOUT
BEGIN
    0
END

IDD_DIALOG_DEVICE_ADDR AFX_DIALOG_LAYOUT
BEGIN
    0
END


/////////////////////////////////////////////////////////////////////////////
//
// String Table
//

STRINGTABLE
BEGIN
    IDS_ABOUTBOX            "关于 KISSHProject(&A)..."
    IDP_SOCKETS_INIT_FAILED "Windows 套接字初始化失败。"
	IDS_CONNECT_FAILED      "连接失败！"
	IDS_CONNECT_SUCCESS     "连接成功！"
END

#endif    // 中文(简体，中国) resources
/////////////////////////////////////////////////////////////////////////////



#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//
#define _AFX_NO_SPLITTER_RESOURCES
#define _AFX_NO_OLE_RESOURCES
#define _AFX_NO_TRACKER_RESOURCES
#define _AFX_NO_PROPERTY_RESOURCES

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_CHS)
LANGUAGE 4, 2
#include "res\KISSHProject.rc2"  // 非 Microsoft Visual C++ 编辑的资源
#include "l.CHS\afxres.rc"      // 标准组件
#if !defined(_AFXDLL)
#include "l.CHS\afxribbon.rc"   // MFC 功能区和控制条资源
#endif
#endif

/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED

