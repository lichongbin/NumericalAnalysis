#pragma once
#include ".\sqlite\sqlite3.h"

class Patient;
class OCTRecord;

class DBAccess
{
public:
	DBAccess(void);
	virtual ~DBAccess(void);

	virtual bool OpenMemory();
	virtual bool Open(LPCTSTR szFile, bool bReadOnly = false);
	virtual void Close();

	bool IsOpen() const
	{
		return (m_db != NULL);
	}

	sqlite3* GetObject() { return m_db; }

	static int loadOrSaveDb(sqlite3 *pInMemory , sqlite3 *pFile , int isSave);

protected:
	bool ExecuteSQL(LPCTSTR szSQL);
	bool ExecuteSQL(LPCTSTR szSQL , int& value);
	
protected:
	sqlite3 *m_db;
	static CCriticalSection m_cs;
};


#include "pch.h"
#include "DBAccess.h"
#include "TextCodec.h"

CString UTF82String(const unsigned char* utf8)
{
	int nLen = utf8_len(utf8);
	if (nLen <= 0)
	{
		return CString(_T(""));
	}

	LPTSTR sf = (LPTSTR)enc_utf8_to_unicode(utf8, nLen);
	CString s(sf);
	delete[] sf;
	return s;
}

COleDateTime UTF82DateTime(const unsigned char* utf8)
{
	int nLen = utf8_len(utf8);
	LPTSTR s = (LPTSTR)enc_utf8_to_unicode(utf8, nLen);
	COleDateTime dt;
	dt.ParseDateTime((LPCTSTR)s);
	delete[]s;
	return dt;
}

CCriticalSection DBAccess::m_cs;

DBAccess::DBAccess(void)
{
	m_db = nullptr;
}

DBAccess::~DBAccess(void)
{
	Close();
}

bool DBAccess::OpenMemory()
{
	int nRes = sqlite3_open_v2(":memory:" , &m_db, SQLITE_OPEN_READWRITE, NULL);
	if (nRes != SQLITE_OK)
	{
		return false;
	}
	return true;
}

bool DBAccess::Open(LPCTSTR szFile, bool bReadOnly /* = false */)
{
// 	if (!TryEnterCriticalSection(&m_cs.m_sect))
// 	{
// 		return false;
// 	}

	size_t nStrlen = _tcslen(szFile);
	if (0 == nStrlen)
	{
 		return false;
	}
	m_cs.Lock();

	/*
	char pass[] = DB_PASS;
	if (sqlite3_db_encrypt(szFile, pass, DB_PASS_LEN) != SQLITE_OK)
	{
		m_cs.Unlock();
		return false;
	}
	*/

	char *utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szFile, nStrlen);
	int nRes = sqlite3_open_v2(utf8, &m_db, bReadOnly ? SQLITE_OPEN_READONLY : SQLITE_OPEN_READWRITE, NULL);
	delete []utf8;
	if (nRes != SQLITE_OK)
	{
		m_cs.Unlock();
		return false;
	}

	/*
	sqlite3_key(m_db, pass, 6);
	*/
	return true;
}

void DBAccess::Close()
{
	if (m_db != NULL)
	{
		sqlite3_close(m_db);
		m_db = NULL;
		m_cs.Unlock();
	}
}

//
//bool DBAccess::AddPatient(Patient& pat)
//{
//	sqlite3_stmt* stmt = NULL;
//	const char* pzTail = NULL;
//
//	COleDateTime dtBirth = pat.GetBirthday();
//	int nOpt[8];
//	pat.GetOptionValue(nOpt);
//	CString sOpt[8];
//	pat.GetOptionString(sOpt);
//
//	TCHAR szSql[1024] = { 0 };
//	_stprintf_s(szSql, sizeof(szSql) / sizeof(szSql[0]), _T("%s"), _T("sss"));
//
//	_stprintf_s(szSql, sizeof(szSql)/sizeof(szSql[0]),
//		        _T("INSERT INTO Patient(PSID, PFName, PLName, PGender, PAge, PBirth, ")
//				_T("PCusINT1, PCusINT2, PCusINT3, PCusINT4, PCusINT5, PCusINT6, PCusINT7, PCusINT8,")
//				_T("PCusStr1, PCusStr2, PCusStr3, PCusStr4, PCusStr5, PCusStr6, PCusStr7, PCusStr8)")
//				_T("VALUES('%s', '%s', '%s' , '%s', '%s', '%04d-%02d-%02d %02d:%02d:%02d' , ")
//				_T("%d, %d, %d, %d, %d, %d, %d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');"),
//		pat.GetIDString().GetString(),
//		pat.GetFirstName().GetString(), 
//		pat.GetLastName().GetString(), 
//		pat.GetGender().GetString(),
//		pat.GetAge().GetString(),
//		dtBirth.GetYear(), dtBirth.GetMonth(), dtBirth.GetDay(),
//		dtBirth.GetHour(), dtBirth.GetMinute(), dtBirth.GetSecond(),
//		nOpt[0], nOpt[1], nOpt[2], nOpt[3], nOpt[4], nOpt[5], nOpt[6], nOpt[7],
//		sOpt[0].GetString(), 
//		sOpt[1].GetString(), 
//		sOpt[2].GetString(), 
//		sOpt[3].GetString(),
//		sOpt[4].GetString(),
//		sOpt[5].GetString(),
//		sOpt[6].GetString(),
//		sOpt[7].GetString());
//
//	size_t utf8Len = 0;
//	char* utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &utf8Len);
//	int nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return FALSE;
//	}
//
//	nRes = sqlite3_step(stmt);
//	sqlite3_finalize(stmt);
//
//	if (SQLITE_DONE != nRes)
//	{
//		return FALSE;
//	}
//
//	_stprintf_s(szSql, _T("SELECT PID, CreateTime FROM Patient ORDER BY PID DESC LIMIT 1;"));
//	utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &utf8Len);
//	nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return FALSE;
//	}
//	nRes = sqlite3_step(stmt);
//	if (nRes == SQLITE_ROW)
//	{
//		int id = sqlite3_column_int(stmt, 0);
//		pat.SetID(id);
//
//		const unsigned char* ts = sqlite3_column_text(stmt, 1);
//
//		int nLen = utf8_len(ts);
//		LPTSTR sts = (LPTSTR)enc_utf8_to_unicode(ts, nLen);
//		COleDateTime tsCreate;
//		tsCreate.ParseDateTime((LPCTSTR)sts);
//		pat.SetCreateTime(tsCreate);
//		delete[] sts;
//
//
//	}
//	sqlite3_finalize(stmt);
//	return true;
//}
//
//bool DBAccess::UpdatePatient(Patient& pat)
//{
//	COleDateTime dtBirth = pat.GetBirthday();
//	int nOpt[8];
//	pat.GetOptionValue(nOpt);
//	CString sOpt[8];
//	pat.GetOptionString(sOpt);
//
//	TCHAR szSql[1024];
//	_stprintf_s(szSql, _T("UPDATE Patient SET PSID = '%s' , PFName = '%s' , PLName = '%s' , ")
//		_T("PAge = '%s', PBirth = '%04d-%02d-%02d %02d:%02d:%02d', ")
//		_T("PGender = '%s', PCusINT1 = %d , PCusINT2 = %d , PCusINT3 = %d , PCusINT4 = %d , ")
//		_T("PCusINT5 = %d , PCusINT6 = %d , PCusINT7 = %d , PCusINT8 = %d , ")
//		_T("PCusStr1 = '%s' , PCusStr2 = '%s' , PCusStr3 = '%s' , PCusStr4 = '%s' , ")
//		_T("PCusStr5 = '%s' , PCusStr6 = '%s' , PCusStr7 = '%s' , PCusStr8 = '%s' ")
//		_T("WHERE PID = %d;"),
//		pat.GetIDString().GetString(),
//		pat.GetFirstName().GetString(), 
//		pat.GetLastName().GetString(),
//		pat.GetAge().GetString(),
//		dtBirth.GetYear(), dtBirth.GetMonth(), dtBirth.GetDay(),
//		dtBirth.GetHour(), dtBirth.GetMinute(), dtBirth.GetSecond(),
//		pat.GetGender().GetString(),
//		nOpt[0], nOpt[1], nOpt[2], nOpt[3],
//		nOpt[4], nOpt[5], nOpt[6], nOpt[7],
//		sOpt[0].GetString(),
//		sOpt[1].GetString(),
//		sOpt[2].GetString(),
//		sOpt[3].GetString(),
//		sOpt[4].GetString(), 
//		sOpt[5].GetString(), 
//		sOpt[6].GetString(), 
//		sOpt[7].GetString(),
//		pat.GetID());
//	return ExecuteSQL(szSql);
//}
//
//bool DBAccess::DeletePatient(Patient& pat)
//{
//	if (pat.m_id <= 0)
//	{
//		return false;
//	}
//
//	sqlite3_stmt* stmt = NULL;
//	const char* pzTail = NULL;
//
//	TCHAR szSql[128] = { 0 };
//	_stprintf_s(szSql, _T("DELETE FROM Patient WHERE PID = %d;"), pat.m_id);
//
//	size_t utf8Len = 0;
//	char* utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &utf8Len);
//	int nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return false;
//	}
//	nRes = sqlite3_step(stmt);
//	sqlite3_finalize(stmt);
//
//	if (SQLITE_DONE != nRes)
//	{
//		return false;
//	}
//	return true;
//}
//
//bool DBAccess::LoadPatient(std::vector<Patient>& vecPat)
//{
//	vecPat.clear();
//
//	sqlite3_stmt* stmt = NULL;
//	const char* pzTail = NULL;
//
//	TCHAR szSql[512] = { 0 };
//	_stprintf_s(szSql, _T("SELECT * FROM Patient WHERE PID NOT IN (SELECT PatientID FROM HOLTER) ORDER BY PID DESC;"));
//
//	size_t ulLength = 0;
//	char* utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &ulLength);
//	int nRes = sqlite3_prepare_v2(m_db, utf8, int(ulLength), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return false;
//	}
//	while (SQLITE_ROW == sqlite3_step(stmt))
//	{
//		int col = 0;
//		int id = sqlite3_column_int(stmt, col++);
//		const unsigned char* utf8ID = sqlite3_column_text(stmt, col++);
//		const unsigned char* utf8fname = sqlite3_column_text(stmt, col++);
//		const unsigned char* utf8lname = sqlite3_column_text(stmt, col++);
//		// 		int year = sqlite3_column_int(stmt, col++);
//		// 		int month = sqlite3_column_int(stmt, col++);
//		// 		int day = sqlite3_column_int(stmt, col++);
//		const unsigned char* utf8age = sqlite3_column_text(stmt, col++);
//		const unsigned char* birth = sqlite3_column_text(stmt, col++);
//		const unsigned char* utf8gender = sqlite3_column_text(stmt, col++);
//		const unsigned char* tsCreate = sqlite3_column_text(stmt, col++);
//
//		Patient pat;
//		pat.SetID(id);
//
//		pat.SetIDString(UTF82String(utf8ID));
//		pat.SetFirstName(UTF82String(utf8fname));
//		pat.SetLastName(UTF82String(utf8lname));
//		pat.SetGender(UTF82String(utf8gender));
//		pat.SetAge(UTF82String(utf8age));
//		pat.SetBirthday(UTF82DateTime(birth));
//
//		vecPat.push_back(pat);
//	}
//	sqlite3_finalize(stmt);
//
//	return true;
//}
//
//
//bool DBAccess::AddRecord(OCTRecord& rc)
//{
//	sqlite3_stmt* stmt = NULL;
//	const char* pzTail = NULL;
//
//	Patient* pat = rc.GetPatient();
//	if (nullptr == pat)
//	{
//		return false;
//	}
//
//	COleDateTime dt = rc.GetTime();
//
//	int nOpt[8];
//	rc.GetOptionValue(nOpt);
//	CString sOpt[8];
//	rc.GetOptionString(sOpt);
//
//	TCHAR szSql[1024] = { 0 };
//	_stprintf_s(szSql, sizeof(szSql) / sizeof(szSql[0]),
//		_T("INSERT INTO OCT(PatientID , RecordTime , Images, RawDir, ")
//		_T("CusINT1, CusINT2, CusINT3, CusINT4, CusINT5, CusINT6, CusINT7, CusINT8,")
//		_T("CusStr1, CusStr2, CusStr3, CusStr4, CusStr5, CusStr6, CusStr7, CusStr8) ")
//		_T("VALUES(%d , '%04d-%02d-%02d %02d:%02d:%02d' , %d, '%s', ")
//		_T("%d, %d, %d, %d, %d, %d, %d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');"),
//		pat->GetID(), 
//		dt.GetYear(), dt.GetMonth(), dt.GetDay(),
//		dt.GetHour(), dt.GetMinute(), dt.GetSecond(),
//		rc.GetCount(), rc.m_sFolder.GetString(),
//		nOpt[0], nOpt[1], nOpt[2], nOpt[3], nOpt[4], nOpt[5], nOpt[6], nOpt[7],
//		sOpt[0].GetString(),
//		sOpt[1].GetString(),
//		sOpt[2].GetString(),
//		sOpt[3].GetString(),
//		sOpt[4].GetString(),
//		sOpt[5].GetString(),
//		sOpt[6].GetString(),
//		sOpt[7].GetString()
//	);
//
//	size_t utf8Len = 0;
//	char* utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &utf8Len);
//	int nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return FALSE;
//	}
//
//	nRes = sqlite3_step(stmt);
//	sqlite3_finalize(stmt);
//
//	if (SQLITE_DONE != nRes)
//	{
//		return FALSE;
//	}
//
//	_stprintf_s(szSql, _T("SELECT OID FROM OCT ORDER BY OID DESC LIMIT 1;"));
//	utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &utf8Len);
//	nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return FALSE;
//	}
//	nRes = sqlite3_step(stmt);
//	if (nRes == SQLITE_ROW)
//	{
//		int id = sqlite3_column_int(stmt, 0);
//		rc.SetID(id);
//	}
//	sqlite3_finalize(stmt);
//
//	return true;
//}
//
//bool DBAccess::UpdateRecord(OCTRecord& rc)
//{
//	Patient* pat = rc.GetPatient();
//	if (!UpdatePatient(*pat))
//	{
//		return false;
//	}
//
//	COleDateTime dt = rc.GetTime();
//	int nOpt[8];
//	rc.GetOptionValue(nOpt);
//	CString sOpt[8];
//	rc.GetOptionString(sOpt);
//
//	TCHAR szSql[1024];
//	_stprintf_s(szSql, _T("UPDATE OCT SET RecordTime = '%04d-%02d-%02d %02d:%02d:%02d', ")
//		_T("Images = '%d', RawDir = '%s', ")
//		_T("PCusINT1 = %d , PCusINT2 = %d , PCusINT3 = %d , PCusINT4 = %d , ")
//		_T("PCusINT5 = %d , PCusINT6 = %d , PCusINT7 = %d , PCusINT8 = %d , ")
//		_T("PCusStr1 = '%s' , PCusStr2 = '%s' , PCusStr3 = '%s' , PCusStr4 = '%s' , ")
//		_T("PCusStr5 = '%s' , PCusStr6 = '%s' , PCusStr7 = '%s' , PCusStr8 = '%s' ")
//		_T("WHERE OID = %d;"),
//		dt.GetYear(), dt.GetMonth(), dt.GetDay(),
//		dt.GetHour(), dt.GetMinute(), dt.GetSecond(),
//		rc.GetCount(), rc.GetFolder().GetString(),
//		nOpt[0], nOpt[1], nOpt[2], nOpt[3],
//		nOpt[4], nOpt[5], nOpt[6], nOpt[7],
//		sOpt[0].GetString(),
//		sOpt[1].GetString(),
//		sOpt[2].GetString(),
//		sOpt[3].GetString(),
//		sOpt[4].GetString(),
//		sOpt[5].GetString(),
//		sOpt[6].GetString(),
//		sOpt[7].GetString(),
//		rc.GetID()
//	);
//	return ExecuteSQL(szSql);
//}
//
//bool DBAccess::LoadRecord(std::vector<OCTRecord>& rcs)
//{
//	rcs.clear();
//
//	sqlite3_stmt* stmt = NULL;
//	const char* pzTail = NULL;
//
//	TCHAR szSql[512] = { 0 };
//	_stprintf_s(szSql, _T("SELECT PID, PSID, PFName, PLName, PAge, ")
//		_T("PBirth, PGender, CreateTime, ")
//		_T("PCusINT1, PCusINT2, PCusINT3, PCusINT4, ")
//		_T("PCusINT5, PCusINT6, PCusINT7, PCusINT8, ")
//		_T("PCusStr1, PCusStr2, PCusStr3, PCusStr4, ")
//		_T("PCusStr5, PCusStr6, PCusStr7, PCusStr8, ")
//		_T("OID, RecordTime, Images, RawDir, ")
//		_T("CusINT1, CusINT2, CusINT3, CusINT4, ")
//		_T("CusINT5, CusINT6, CusINT7, CusINT8, ")
//		_T("CusStr1, CusStr2, CusStr3, CusStr4, ")
//		_T("CusStr5, CusStr6, CusStr7, CusStr8 ")
//		_T("FROM OCT, Patient WHERE OCT.PatientID = Patient.PID ORDER BY OID DESC;"));
//
//	size_t ulLength = 0;
//	char* utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSql, _tcslen(szSql), &ulLength);
//	int nRes = sqlite3_prepare_v2(m_db, utf8, int(ulLength), &stmt, &pzTail);
//	delete[]utf8;
//	if (SQLITE_OK != nRes)
//	{
//		return false;
//	}
//	while (SQLITE_ROW == sqlite3_step(stmt))
//	{
//		OCTRecord rc;
//		Patient* pat = rc.GetPatient();
//
//		int col = 0;
//		int pid = sqlite3_column_int(stmt, col++);
//
//		const unsigned char* utf8PSID = sqlite3_column_text(stmt, col++);
//		const unsigned char* utf8fname = sqlite3_column_text(stmt, col++);
//		const unsigned char* utf8lname = sqlite3_column_text(stmt, col++);
//
//		const unsigned char* utf8age = sqlite3_column_text(stmt, col++);
//		const unsigned char* birth = sqlite3_column_text(stmt, col++);
//		const unsigned char* utf8gender = sqlite3_column_text(stmt, col++);
//		const unsigned char* tsCreate = sqlite3_column_text(stmt, col++);
//
//		pat->SetID(pid);
//
//		pat->SetIDString(UTF82String(utf8PSID));
//		pat->SetFirstName(UTF82String(utf8fname));
//		pat->SetLastName(UTF82String(utf8lname));
//		pat->SetGender(UTF82String(utf8gender));
//		pat->SetAge(UTF82String(utf8age));
//		pat->SetBirthday(UTF82DateTime(birth));
//		pat->SetCreateTime(UTF82DateTime(tsCreate));
//
//		int nOpt[8] = { 0 };
//		for (size_t i = 0; i < 8; i++)
//		{
//			nOpt[i] = sqlite3_column_int(stmt, col++);
//		}
//		CString sOpt[8];
//		for (size_t i = 0; i < 8; i++)
//		{
//			const unsigned char* utf8 = sqlite3_column_text(stmt, col++);
//			sOpt[i] = UTF82String(utf8);
//		}
//		pat->SetOptionValue(nOpt);
//		pat->SetOptionString(sOpt);
//
//		int oid = sqlite3_column_int(stmt, col++);
//		const unsigned char* tsRecord = sqlite3_column_text(stmt, col++);
//		int images = sqlite3_column_int(stmt, col++);
//		const unsigned char* rawDir = sqlite3_column_text(stmt, col++);
//
//		rc.SetID(oid);
//		rc.SetFolder(UTF82String(rawDir));
//		rc.SetTime(UTF82DateTime(tsRecord));
//
//		for (size_t i = 0; i < 8; i++)
//		{
//			nOpt[i] = sqlite3_column_int(stmt, col++);
//		}
//		for (size_t i = 0; i < 8; i++)
//		{
//			const unsigned char* utf8 = sqlite3_column_text(stmt, col++);
//			sOpt[i] = UTF82String(utf8);
//		}
//
//		rc.SetOptionValue(nOpt);
//		rc.SetOptionString(sOpt);
//
//		rcs.push_back(rc);
//	}
//	sqlite3_finalize(stmt);
//	return true;
//}


bool DBAccess::ExecuteSQL(LPCTSTR szSQL)
{
#if 0
	char
	int utf8Len = 0;
	char *utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSQL, _tcslen(szSQL), &utf8Len);
	int nRes = sqlite3_exec(m_db, utf8, NULL, );
#else
	sqlite3_stmt *stmt = NULL;
	const char *pzTail = NULL;
	size_t utf8Len = 0;
	char *utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSQL, _tcslen(szSQL), &utf8Len);
	int nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
	delete []utf8;
	if (SQLITE_OK != nRes)
	{
		return false;
	}

	nRes = sqlite3_step(stmt);
// 	if (SQLITE_DONE != nRes)
// 	{
// 		for (int i = 0; i < 10; i++)
// 		{
// 			if (SQLITE_BUSY == nRes)
// 			{
// 				Sleep(1000);
// 				continue;
// 			}
// 			else
// 			{
// 				break;
// 			}
// 		}
// 	}
	sqlite3_finalize(stmt);

	if (SQLITE_DONE != nRes && SQLITE_ROW != nRes)
	{
		return false;
	}
	return true;
#endif
}


bool DBAccess::ExecuteSQL(LPCTSTR szSQL , int& value)
{
	sqlite3_stmt *stmt = NULL;
	const char *pzTail = NULL;
	size_t utf8Len = 0;
	char *utf8 = (char*)enc_unicode_to_utf8((const unsigned short*)szSQL, _tcslen(szSQL), &utf8Len);
	int nRes = sqlite3_prepare_v2(m_db, utf8, int(utf8Len), &stmt, &pzTail);
	delete []utf8;
	if (SQLITE_OK != nRes)
	{
		return false;
	}

	if (SQLITE_ROW == sqlite3_step(stmt))
	{
		value = sqlite3_column_int(stmt , 0);
		nRes = SQLITE_DONE;
	}
	else
	{
		nRes = SQLITE_FAIL;
	}
	sqlite3_finalize(stmt);

	if (SQLITE_DONE != nRes)
	{
		return false;
	}
	return true;
}


int DBAccess::loadOrSaveDb(sqlite3 *pInMemory, sqlite3 *pFile, int isSave)
{
	int rc;                   /* Function return code */
	sqlite3_backup *pBackup;  /* Backup object used to copy data */
	sqlite3 *pTo;             /* Database to copy to (pFile or pInMemory) */
	sqlite3 *pFrom;           /* Database to copy from (pFile or pInMemory) */

	pFrom = (isSave ? pInMemory : pFile);
	pTo   = (isSave ? pFile     : pInMemory);

	pBackup = sqlite3_backup_init(pTo, "main", pFrom, "main");
	if( pBackup ){
		(void)sqlite3_backup_step(pBackup, -1);
		(void)sqlite3_backup_finish(pBackup);
	}
	rc = sqlite3_errcode(pTo);
	return rc;
}